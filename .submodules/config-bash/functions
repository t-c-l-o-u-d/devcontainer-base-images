#!/usr/bin/bash
# GNU Affero General Public License v3.0 or later (see COPYING or https://www.gnu.org/licenses/agpl.txt)

# sleeps and creates a countdown with a default duration of 5s
show_wait_timer() {
    # hide cursor
    tput civis
    local DURATION=${1:-5}
    echo -n "Waiting: "
    while [ "${DURATION}" -ge 1 ]; do
        tput el
        echo -n "${DURATION}"
        tput cub "${#DURATION}"
        sleep 1
        DURATION=$((DURATION - 1))
    done
    echo ""
    # show cursor
    tput cnorm
}

# extract a lot of stuff
extract() {
    if [ -f "${1}" ]; then
        # Get file type using the 'file' command
        FILE_TYPE="$(file --brief --mime-type "${1}")"
        case "${FILE_TYPE}" in
            application/x-tar)
                tar -xvf "${1}" --directory "$(dirname "${1}")" ;;
            application/gzip)
                tar -xvzf "${1}" --directory "$(dirname "${1}")" ;;
            application/x-bzip2)
                tar -xvjf "${1}" --directory "$(dirname "${1}")" ;;
            application/x-xz)
                tar -xvJf "${1}" --directory "$(dirname "${1}")" ;;
            application/zip)
                unzip "${1}" -d "$(dirname "${1}")" ;;
            application/x-rar)
                unrar x "${1}" "$(dirname "${1}")" ;;
            application/x-7z-compressed)
                7z x "${1}" -o"$(dirname "${1}")" ;;
            *)
                echo "Unsupported file type: ${FILE_TYPE}"
                return 1 ;;
        esac
    else
        echo "${1} is not a valid file"
        return 1
    fi
}

compress() {
   tar --create --gzip --file $(basename ${1}).tar.gz ${1}
}

# open directory in VSCode
open() {
    { nohup code "${1}" >/dev/null 2>&1 & disown; } 2>/dev/null; sleep .1;
}

# get public ip info using Mullvad's API
public_ip_info() {
    curl --silent https://am.i.mullvad.net/json | jq
}

# extract rpm contents into current directory
rpm_extract() {
    rpm2cpio "${1}" | cpio --extract --make-directories --unconditional --preserve-modification-time
}

podman_rma() {
    podman stop --all || true
    buildah rm --all || true
    buildah rmi --all || true
    podman rm --all || true
    podman rmi --all || true
    podman system prune --all --force || true
    podman system prune --external --force || true
    echo "Volumes were preserved. To remove them execute: 'podman system prune --volumes'"
}


# ================
# legacy functions
# ================
git_info() {
    if command -v git &>/dev/null && git rev-parse --is-inside-work-tree &>/dev/null; then
        GIT_UNPUSHED_COMMITS="$(git log --branches --not --remotes --oneline 2>/dev/null | wc --lines 2>/dev/null)"
        GIT_STAGED_CHANGES="$(git diff --cached --stat --name-status 2>/dev/null | wc --lines 2>/dev/null)"
        GIT_UNSTAGED_CHANGES="$(git diff --shortstat 2>/dev/null | sed --expression 's/^ *//' 2>/dev/null)"
        GIT_UNTRACKED_FILES="$(git ls-files "$(pwd)" --exclude-standard --other | wc --lines 2>/dev/null)"
        if [[ "${GIT_UNPUSHED_COMMITS}" -gt 0 ]]; then
            echo -e "\n${BRIGHT}${PURPLE}Unpushed Commits: ${GIT_UNPUSHED_COMMITS}${NORMAL}\c"
        elif [[ "${GIT_STAGED_CHANGES}" -gt 0 ]]; then
            echo -e "\n${BRIGHT}${PURPLE}Staged Changes: ${GIT_STAGED_CHANGES}${NORMAL}\c"
        elif [[ -n "${GIT_UNSTAGED_CHANGES}" ]]; then
            echo -e "\n${BRIGHT}${PURPLE}${GIT_UNSTAGED_CHANGES}${NORMAL}\c"
        elif [[ "${GIT_UNTRACKED_FILES}" -gt 0 ]]; then
            echo -e "\n${BRIGHT}${PURPLE}${GIT_UNTRACKED_FILES} untracked files.${NORMAL}\c"
        else
            echo -e "\n${BRIGHT}${PURPLE}No pending changes.${NORMAL}\c"
        fi
    fi
}
